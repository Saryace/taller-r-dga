---
title: Taller R - DGA
subtitle: Formatos y buenas pr√°cticas de programaci√≥n en R usando Tidyverse
format: revealjs
author:
  - name: Dra. Sara E. Acevedo
    orcid: 0000-0003-3203-2106
    email: seaceved@uc.cl
    affiliations: PUC - CEDEUS
  - name: Dra. Alejandra S. Vega
    orcid: 0000-0002-2842-8178
    email: asvega@uc.cl
    affiliations: CEDEUS
date: "08/09/2025"
date-format: "iso"
---

## Acerca de nosotras üë©üèΩ‚Äçüíª

- **Sara Acevedo** (üêà): Profesora Asistente Facultad de Agronom√≠a de Sistemas Naturales - F√≠sica de suelos / Suelos urbanos / Ciencia Reproducible 

- **Alejandra Vega** (üêï): Investigadora CEDEUS - Geoqu√≠mica de suelos / Suelos urbanos / Calidad del Agua

## Objetivos de la clase

::: incremental
-   Conceptos e ideas generales de reproducibilidad 
-   Buenas pr√°cticas para escribir c√≥digo 
-   Tidyverse
:::

## Porqu√©?

::: columns
::: {.column width="50%"}
![](figuras/tidyverse.png){fig-cap="Una constelaci√≥n de hex stickers del ecosistema tidyverse por Allison Horst"}
:::

::: {.column width="50%"}
::: {.fragment .fade-up}
-   C√≥digo eficiente nos hace la vida m√°s f√°cil
:::

::: {.fragment .fade-up}
-   Somos humanos: c√≥digo claro y entendible minimiza posibilidad de errores
:::

::: {.fragment .fade-up}
-   Filosof√≠a Tidyverse ordenada
:::
:::
:::

## Reglas de oro generales de reproducibilidad

Lista seg√∫n [Reproducible Data Science](https://ecorepsci.github.io/reproducible-science/project-organization.html)

1.  Los datos crudos **nunca** deben modificarse. Datos procesados deben ir en una carpeta aparte.
2.  Resultados de c√≥digo deben guardarse en su propia carpeta.
3.  Los c√≥digos van en su propia carpeta.
4.  Siempre modularizar el c√≥digo: en lugar de un √∫nico script gigante, dividir el flujo de trabajo en scripts cortos.
5.  Apuntar escribir a c√≥digo seco: **DRY** do not repeat yourself

## Escribir "buen" c√≥digo

::: columns
::: {.column width="50%"}
![](https://psyteachr.github.io/reprores-v4/images/memes/wickham-shitty-code.png)
:::

::: {.column width="50%"}
::: {.fragment .fade-up}
-   Le√≠ble por humanos y computadoras, ordenable
:::

::: {.fragment .fade-up}
-   Reusable
:::

::: {.fragment .fade-up}
-   Robusto
:::
:::
:::

## Le√≠ble por humanos y computadoras, ordenable

1. Nombrar archivos y carpetas de forma consistente
2. Comentar el c√≥digo
3. Ordenar las carpetas y dejar un registro de instrucciones

## Nombrar archivos y carpetas de forma consistente

- Usa nombres claros, sin espacios ni caracteres especiales
- Usar prefijos num√©ricos en scripts, para ayudar al orden alfab√©tico y cronol√≥gico.

## ![](figuras/camello.jpeg){fig-align="center" height=40%}

## Comentar el c√≥digo 

- La idea es explicar el por qu√©  del c√≥digo, no solamente que hace.
- Que otro humano entienda el razonamiento detr√°s del c√≥digo.

## Ordenar los directorios y carpetas

- Evitar ‚Äúpath spaghetti‚Äù ni rutas absolutas (C:/Users/...)
- Dejar huella para tu ‚Äúyo futuro‚Äù.
- Un README.md claro con instrucciones m√≠nimas.
- Ayuda a que cualquier persona (incluy√©ndote a ti) pueda retomar el proyecto meses despu√©s.

## 

::: {#fig-folder layout-ncol="2"}

![](https://ecorepsci.github.io/reproducible-science/img/activity-based-directory-organization.jpg)

![](https://ecorepsci.github.io/reproducible-science/img/project-based-directory-organization.jpg) 

Enfoques
:::

## Reusable

::: incremental
-   Separar datos de scripts. 
-   Crear el c√≥digo para usar constantes solo una vez.
-   Solo una cosa a la vez, aplica para funciones y scripts.
-   C√≥digo seco (DRY) do not repear yourself.
:::

## Robusto

::: incremental

-   Si hay las suposiciones o condiciones, declararlas
-   Verificar los valores antes de procesarlos.
-   Identificar excepciones.
-   Generar errores cuando no se cumplan las expectativas.

:::

## Robusto

```{r}
#| echo: true

nombre_region <- function(x) {
  regiones <- data.frame(
    numero = 1:16,
    region = c(
      "Tarapac√°", "Antofagasta", "Atacama", "Coquimbo", "Valpara√≠so",
      "O'Higgins", "Maule", "Biob√≠o", "La Araucan√≠a", "Los Lagos",
      "Ays√©n", "Magallanes", "Metropolitana", "Los R√≠os",
      "Arica y Parinacota", "√ëuble"
    )
  )
  regiones$region[match(x, regiones$numero)]
}

nombre_region(13)

```

## Robusto

```{r}
#| echo: true

nombre_region <- function(x) {
  regiones <- data.frame(
    numero = 1:16,
    region = c(
      "Tarapac√°", "Antofagasta", "Atacama", "Coquimbo", "Valpara√≠so",
      "O'Higgins", "Maule", "Biob√≠o", "La Araucan√≠a", "Los Lagos",
      "Ays√©n", "Magallanes", "Metropolitana", "Los R√≠os",
      "Arica y Parinacota", "√ëuble"
    )
  )
  regiones$region[match(x, regiones$numero)]
}

nombre_region(17)

```

## An√°lisis exploratorio de datos (EDA)

::: incremental
-   Preguntas sobre los datos de investigaci√≥n.
-   Buscar respuestas visualizando, transformando y modelando.
-   En base a lo explorado, refinar hip√≥tesis y preguntas anteriores.
-   Nuevas preguntas ‚Üí Nuevos an√°lisis ‚Üí Nuevos modelos.
-   Librer√≠a Tidyverse
:::

## Flujo de trabajo EDA

::: columns
::: {.column width="50%"}
![](https://posit.co/wp-content/themes/Posit/public/markdown-blogs/artist-in-residence/horst-eco-r4ds.png)
:::

::: {.column width="50%"}
::: {.fragment .fade-up}
-   Comenzamos importando datos
:::

::: {.fragment .fade-up}
-   Hacemos nuestro EDA transformar ‚Üí visualizar ‚Üí modelar
:::

::: {.fragment .fade-up}
-   Avanzamos a la comunicaci√≥n (posters, presentaciones, reportes, papers...)
:::
:::
:::

## Librer√≠a en R: Tidyverse

Tidyverse: 

* Megapaquete que contiene paquetes para el an√°lisis datos
* Construidos con los mismos principios

La filosof√≠a del paquete

* Reusar estructuras de datos
* Utilizar el operador `pipe %>% ` para combinar funciones
* Pensado para "humanos"

## Librer√≠a en R: Tidyverse

Ejemplo: un pedazo de torta a partir de ingredientes

::: {.incremental}
- Ingredientes (harina, az√∫car, etc.) üõí
- Mezclar en un bowl ingredientes ü•£
- Hornear la mezcla ‚è≤Ô∏è
- Decorar el bizcocho ü•ß
- Cortar üç∞
:::

## Como ver√≠amos el c√≥digo en R

```
ingredientes(c=(harina, az√∫car)) %>% 
mezclar(ü•£) %>% 
hornar(‚è≤Ô∏è) %>% 
decorar(ü•ß) %>% 
cortar(üç∞)

```

## Paquetes

- **ggplot2** : visualizaci√≥n de datos 
- **dplyr** : transformar datos  
- **tidyr** : formatear los datos (ejemplo pasando de wide a long)
- **readr** : importar datos de texto (csv, tsv...).  
- **purrr** : programaci√≥n funcional
- **tibble** : data frames tibble
- **stringr** y **forcats** : manipulaci√≥n de cadenas de texto y factores (categor√≠as).  

# [Clase introductoria lista! Veamos c√≥digo üë©üèΩ‚Äçüíª]{.r-fit-text} {background-color="#40666e"}


